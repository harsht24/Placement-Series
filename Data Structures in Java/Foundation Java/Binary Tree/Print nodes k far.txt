// https://www.pepcoding.com/resources/online-java-foundation/binary-tree/print-nodes-k-away-binary-tree-official/ojquestion#

   public static void printKLevelsDown(Node node, int k, Node blocker){
    // write your code here
    if(node==null || k < 0 || node==blocker){
        return;
    }
    if(k==0){
        System.out.println(node.data);
    }
    printKLevelsDown(node.left, k-1, blocker);
    printKLevelsDown(node.right, k-1, blocker);
  } 
   
   
   public static ArrayList<Node> nodeToRootPath(Node node, int data){
    if(node == null){
      return new ArrayList<>();
    }

    if(node.data == data){
      ArrayList<Node> list = new ArrayList<>();
      list.add(node);
      return list;
    }

    ArrayList<Node> llist = nodeToRootPath(node.left, data);
    if(llist.size() > 0){
      llist.add(node);
      return llist;
    }

    ArrayList<Node> rlist = nodeToRootPath(node.right, data);
    if(rlist.size() > 0){
      rlist.add(node);
      return rlist;
    }

    return new ArrayList<>();
  }


  public static void printKNodesFar(Node node, int data, int k) {
    // write your code here
    ArrayList<Node> path = nodeToRootPath(node, data);
     for(int i=0; i<path.size() && i<=k; i++){
        printKLevelsDown(path.get(i), k-i, i==0? null : path.get(i-1));
     }
  }